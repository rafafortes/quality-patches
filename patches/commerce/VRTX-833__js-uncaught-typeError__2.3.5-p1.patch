diff --git a/vendor/vertex/module-address-validation/view/frontend/web/js/view/customer/address-validation.js b/vendor/vertex/module-address-validation/view/frontend/web/js/view/customer/address-validation.js
index ef0d98e..845759e 100644
--- a/vendor/vertex/module-address-validation/view/frontend/web/js/view/customer/address-validation.js
+++ b/vendor/vertex/module-address-validation/view/frontend/web/js/view/customer/address-validation.js
@@ -12,7 +12,8 @@ define([
     'Vertex_AddressValidation/js/action/address-validation-request',
     'Vertex_AddressValidation/js/model/customer/address-resolver',
     'Vertex_AddressValidation/js/view/validation-message',
-    'Vertex_AddressValidation/js/view/customer/address-form'
+    'Vertex_AddressValidation/js/view/customer/address-form',
+    'Vertex_AddressValidation/uiRegistry!addressValidationMessage'
 ], function (
     $,
     ko,
@@ -22,7 +23,8 @@ define([
     addressValidationRequest,
     addressResolver,
     message,
-    addressForm
+    addressForm,
+    addressValidationMessage
 ) {
     'use strict';

@@ -38,7 +40,7 @@ define([
         initialize: function () {
             this._super();

-            this.message = registry.get('addressValidationMessage');
+            this.message = addressValidationMessage;
             addressForm.formUpdated.extend({notify:'always'}).subscribe(this.addressUpdated.bind(this));

             return this;
diff --git a/vendor/vertex/module-address-validation/view/frontend/web/uiRegistry.js b/vendor/vertex/module-address-validation/view/frontend/web/uiRegistry.js
new file mode 100644
index 0000000..cc1ac1a
--- /dev/null
+++ b/vendor/vertex/module-address-validation/view/frontend/web/uiRegistry.js
@@ -0,0 +1,28 @@
+/**
+ * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/
+ * @author     Mediotype                     https://www.mediotype.com/
+ */
+
+define(function () {
+    'use strict';
+
+    return {
+        load: function (name, req, onload, config) {
+            req(['uiRegistry'], function (registry) {
+                let count = 0;
+                let timer = setInterval(function() {
+                    if(typeof(registry.get(name)) !== 'undefined') {
+                        onload(registry.get(name));
+                        clearInterval(timer);
+                    }
+                    count++;
+
+                    if(count >= 10) {
+                        clearInterval(timer);
+                        onload.error(new Error(name + 'never loaded into the registry'));
+                    }
+                }, 500);
+            });
+        }
+    }
+});
